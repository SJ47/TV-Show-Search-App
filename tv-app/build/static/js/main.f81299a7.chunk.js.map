{"version":3,"sources":["components/ShowsList.js","components/ShowDetails.js","components/Favourites.js","containers/TvContainer.js","App.js","index.js"],"names":["ShowsList","_ref","shows","onSelectedShow","showNames","map","show","image","network","name","rating","average","react_default","a","createElement","onClick","key","id","className","src","medium","width","height","alt","mess","length","Fragment","ShowDetails","selectedShow","onFavouriteClick","favourite","dangerouslySetInnerHTML","__html","summary","Favourites","favouriteShows","onFavImageClicked","favouriteShowsImages","favouriteShow","TvContainer","_useState","useState","_useState2","Object","slicedToArray","setShows","_useState3","_useState4","setSelectedShow","_useState5","_useState6","searchShow","setSearchShow","_useState7","_useState8","buildSearch","setBuildSearch","_useState9","_useState10","setFavouriteShows","handleSelectedShow","tempShow","find","handleDeleteFavouriteShow","favShow","newFavShowList","filter","useEffect","fetch","concat","headers","User-Agent","then","res","json","data","onSubmit","event","preventDefault","onChange","target","value","handleBuildSearch","type","placeholder","autoFocus","components_Favourites","favShowClicked","components_ShowsList","components_ShowDetails","some","toConsumableArray","App","containers_TvContainer","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f81299a7.chunk.js","sourcesContent":["import React from 'react'\n\n// This component will render the view of a list of shows matching a search string input by the user\nconst ShowsList = ({ shows, onSelectedShow }) => {\n\n    // Iterate through all the shows returned and render out the html with a clickable image for each show listed\n    const showNames = shows.map((show) => {\n        // If show object or show image do not exist, just return null\n        if (!show || !show.show.image) {\n            return (null)\n        }\n\n        // Replace any other null data with a placeholder so as not to error out\n        // if (!show.show.image) {\n        //     show.show.image = { medium: \"https://st4.depositphotos.com/14953852/24787/v/600/depositphotos_247872612-stock-illustration-no-image-available-icon-vector.jpg\" }\n        // }\n\n        if (!show.show.network) {\n            show.show.network = { name: \"unknown\" }\n        }\n\n        if (!show.show.rating.average) {\n            show.show.rating.average = \"na\"\n        }\n\n        return (\n            <li onClick={() => { onSelectedShow(show) }} key={show.show.id}>\n                <img className=\"card-img\" src={show.show.image.medium} width=\"150\" height=\"200px\" alt=\"\">\n                </img>\n            </li >\n        )\n    })\n\n    // If no results are found, just display a no results found message\n    let mess = \"\";\n    if (showNames.length === 0) {\n        mess = \"No results found\"\n    }\n\n    // Render the views\n    return (\n        <>\n            <div className=\"left-column\">\n                <h2 className=\"search-results-header\">Search Results</h2>\n                <hr />\n                <ul>{showNames}{mess}</ul>\n\n            </div>\n        </>\n    )\n}\n\nexport default ShowsList\n","import React from 'react'\n\n// This component will render the view of an individual shows details\nconst ShowDetails = ({ selectedShow, onFavouriteClick }) => {\n\n    // If show object does not exist, just return null\n    if (!selectedShow) {\n        return (null)\n    }\n\n    // Replace any null data with a placeholder so as not to error out\n    if (!selectedShow.show.image) {\n        selectedShow.show.image = { medium: \"https://st4.depositphotos.com/14953852/24787/v/600/depositphotos_247872612-stock-illustration-no-image-available-icon-vector.jpg\" }\n    }\n\n    if (!selectedShow.show.network) {\n        selectedShow.show.network = { name: \"unknown\" }\n    }\n\n    if (!selectedShow.show.rating.average) {\n        selectedShow.show.rating.average = \"na\"\n    }\n\n    // Render view of card detail for an individual show\n    return (\n        <div className=\"right-column\">\n            <h2 className=\"selected-card-title\">{selectedShow.show.name}</h2>\n            <hr />\n\n            <img src={selectedShow.show.image.medium} alt=\"\" height=\"250px\" className=\"selected-img\" />\n\n            <div className=\"rating-fav-text-container\">\n                <h4 className=\"rating-text\">Rating</h4>\n                <h4 className=\"favourite-text\">Favourite</h4>\n            </div>\n            <div className=\"rating-fav-circle-container\">\n                <p className=\"rating\">{selectedShow.show.rating.average}</p>\n\n                {/* Render a + or - sign to add or delete a favourite show based on a show attribute being a fav or not */}\n                {selectedShow.show.favourite ?\n                    (<i className=\"fas fa-minus-circle\" onClick={() => { onFavouriteClick(selectedShow) }}  ></i>) :\n                    (<i className=\"fas fa-plus-circle\" onClick={() => { onFavouriteClick(selectedShow) }}  ></i>)\n                }\n            </div>\n\n            <h2 className=\"summary-text-title\">Summary</h2>\n            <hr />\n\n            {/* Summary text is returned from API with HTML elements built into the text so using below to render that HTML text */}\n            <div\n                dangerouslySetInnerHTML={{\n                    __html: selectedShow.show.summary\n                }} className=\"summary-text\"></div>\n\n        </div>\n    )\n}\n\nexport default ShowDetails\n","import React from 'react'\n\n// This component will render the view all the users favourite shows as clickable image thumbnails\n\nconst Favourites = ({ favouriteShows, onFavImageClicked }) => {\n\n    const favouriteShowsImages = favouriteShows.map((favouriteShow) => {\n        return <img onClick={() => { onFavImageClicked(favouriteShow) }} className=\"fav-image\" src={favouriteShow.show.image.medium} key={favouriteShow.show.id} alt=\"\" height=\"100px\"></img>\n    })\n\n    // Render view of a users favourite shows\n    return (\n        <>\n            <h2 className=\"favouriteShowsTitle\">Favourite Shows</h2>\n            <hr />\n            <div className=\"favContainer\">\n                {favouriteShowsImages}\n            </div>\n        </>\n    )\n}\n\nexport default Favourites\n","import React, { useEffect, useState } from 'react';\nimport ShowsList from \"../components/ShowsList\";\nimport ShowDetails from \"../components/ShowDetails\";\nimport Favourites from '../components/Favourites';\n\n\n// This parent container holds the state and logic for the app\nconst TvContainer = () => {\n\n    const [shows, setShows] = useState([]);\n    const [selectedShow, setSelectedShow] = useState(null);\n    const [searchShow, setSearchShow] = useState(\"\");\n    const [buildSearch, setBuildSearch] = useState(\"\");\n    const [favouriteShows, setFavouriteShows] = useState([]);\n\n    // Fetch shows and store as an array of shows inside component state\n    const getShows = () => {\n        fetch(`http://api.tvmaze.com/search/shows?q=${searchShow}`, {\n            headers: { \"User-Agent\": \"Netlify\" }\n        })\n            .then(res => res.json())\n            .then(data => setShows(data))\n    }\n\n    // Update state with a single show object that was selected\n    const handleSelectedShow = (show) => {\n        // Check if show is a favourite and if it is use that instead of the selected object \n        // to allow deleting from fav list regardless of whether selection is from fav list or search results list\n        const tempShow = favouriteShows.find(favouriteShow => favouriteShow.show.id === show.show.id)\n        if (tempShow) {\n            show = tempShow\n        }\n\n        // Update the state with the selected show\n        setSelectedShow(show)\n    }\n\n    // Build out the search string so as not to continually call the fetch before user has entered his full search string and submit is clicked\n    const handleBuildSearch = (event) => {\n        event.preventDefault();\n        setBuildSearch(event.target.value)\n    }\n\n    // When submit search button is clicked, then request a new fetch of API data \n    // using the data the user has entered in to the input search box\n    const handleShowSubmit = (event) => {\n        event.preventDefault();\n        setSearchShow(buildSearch)\n    }\n\n    // Handle the add fav show to array of fav shows after favourite clicked and if not already a favourite\n    const handleFavouriteClick = (favShow) => {\n\n        // NOTE: includes() method did not fully work for this example - it will add in a duplicate if you re-search and add fav\n        // So using some() method instead to check the id does not already exist\n        if (!favouriteShows.some(favouriteShow => favouriteShow.show.id === favShow.show.id)) {\n\n            // If this is a new favourite show then\n            // - Add a favourite tag to the show object\n            // - Copy the current state of fav shows and add the new fav show\n            favShow.show.favourite = true;\n            const newFavShowList = [...favouriteShows, favShow]\n            setFavouriteShows(newFavShowList);\n        } else {\n            // If not a new fav show\n            // - it must already be a fav show\n            // - therefore user is clicking to delete from fav shows\n            handleDeleteFavouriteShow(favShow);\n        }\n    }\n\n    // Handle what to do when the fav show in the favourite list is clicked \n    // Update the showDetail card with the favourite clicked\n    // in the same manner as clicking on a show from the results list\n    const handleFavImageClicked = (favShowClicked) => {\n        handleSelectedShow(favShowClicked);\n\n    }\n\n    // Handle delete favourite show\n    const handleDeleteFavouriteShow = (favShow) => {\n        const newFavShowList = favouriteShows.filter((show) => {\n            return show !== favShow\n        })\n\n        // Update the favouriteShows state with the new array (with the item clicked removed)\n        favShow.show.favourite = false\n        setFavouriteShows(newFavShowList)\n    }\n\n\n    // useEffect setup to run a fresh API fetch when a new searchShow has been submitted by user\n    useEffect(() => {\n        getShows();\n    }, [searchShow]);\n\n\n    // Render the views\n    return (\n        <>\n            <div className=\"container\">\n                <h1 className=\"header\"><span className=\"header-text\">TV Show Search</span>\n                    <hr />\n                    <form onSubmit={handleShowSubmit}>\n                        {/* Commented line below would search as the user types.  Nice, but a lot of API fetch calls in the process */}\n                        {/* <input onChange={event => setSearchShow(event.target.value)} type=\"text\" placeholder=\"Search for show\" /> */}\n                        <input className=\"input-search\" onChange={event => handleBuildSearch(event)} type=\"text\" placeholder=\"Search for TV show\" autoFocus=\"autofocus onfocus=\" />\n                        <input className=\"submit-btn\" type=\"submit\" value=\"Search\" />\n                    </form>\n                </h1>\n            </div>\n            <div className=\"tv-container \">\n                <div className=\"favouritesContainer\">\n                    <Favourites favouriteShows={favouriteShows} onFavImageClicked={handleFavImageClicked} />\n                </div>\n\n                <ShowsList shows={shows} onSelectedShow={handleSelectedShow} />\n                <ShowDetails selectedShow={selectedShow} onFavouriteClick={handleFavouriteClick} />\n\n            </div>\n        </>\n    )\n}\n\nexport default TvContainer;","import React from 'react'\n\nimport './App.css';\nimport TvContainer from './containers/TvContainer';\n\nfunction App() {\n  return (\n    <>\n      <TvContainer />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}